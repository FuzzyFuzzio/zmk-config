#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// Left bottom row pinky 2nd column

#ifndef LB5

#define LB5 24

#endif

// Right bottom row pinky 2nd column
#ifndef RB5

#define RB5 35

#endif

#define DEF 0
#define NUM 1
#define SYM 2
#define ADJ 3
#define QUICK_TAP_MS 200
#define TAPPING_TERM_MS 150

&sk {
    release-after-ms = <600>;
    quick-release;
};

/ {
    /* assign `input-listener` to all pointing devices */
    /* &glidepoint0 on central, &glidepoint1 on peripheral */

    tpad_central_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&glidepoint0>;
        y-invert;
        scale-multiplier = <2>;

        // xy-swap;
        // x-invert;
    };

    tpad_peripheral_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&glidepoint1>;
        layers = <DEF NUM ADJ>;
        y-invert;
        scale-multiplier = <2>;

        /* NOTE: do NOT override event code here, */
        /*       let Cirque glidepoint reports click from taps */
        // evt-type = <INPUT_EV_REL>;
        // x-input-code = <INPUT_REL_X>;
        // y-input-code = <INPUT_REL_Y>;
    };

    tpad_peripheral_scroll {
        compatible = "zmk,input-behavior-listener";
        device = <&glidepoint1>;
        layers = <SYM>;

        /* NOTE: only apply input-code overriding for INPUT_EV_REL */

        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        bindings = <&ib_wheel_scaler 1 8>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos { compatible = "zmk,combos"; };

    behaviors {
        lq: layer_toggle_quick {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            label = "Hold Tap";
        };

        htb: hold_tap_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Tab Balanced";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = " ";
            bindings = <
&kp LC(Z)  &kp Q                 &kp W           &kp E        &kp R              &kp T      &kp Y  &kp U               &kp I        &kp O           &kp P               &kp C_PREV
&kp LC(V)  &ht LGUI A            &ht LEFT_ALT S  &ht LCTRL D  &htb LEFT_SHIFT F  &kp G      &kp H  &htb RIGHT_SHIFT J  &ht RCTRL K  &ht LEFT_ALT L  &ht RGUI SEMICOLON  &kp C_PLAY_PAUSE
&kp LC(C)  &kp Z                 &kp X           &kp C        &kp V              &kp B      &kp N  &kp M               &kp COMMA    &kp DOT         &kp FSLH            &kp C_NEXT
                                                 &kp ENTER                                                             &to 4
           &mt LS(LCTRL) ESCAPE  &mt LCTRL TAB   &kp SPACE    &mo 1                                &mo 2               &kp ENTER    &kp BACKSPACE   &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        left_layer {
            display-name = "Numpad";
            bindings = <
&kp LC(LS(Z))  &kp EXCL      &kp AT     &kp HASH       &kp DLLR          &kp PRCNT           &kp ASTERISK  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp SLASH   &kp PERCENT
&kp LC(LS(V))  &kp QUESTION  &kp MINUS  &kp PLUS       &kp EQUAL         &kp UNDERSCORE      &kp NUMBER_0  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PERIOD  &kp EQUAL
&kp LC(X)      &kp TILDE     &kp GRAVE  &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSPACE       &kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS   &kp CARET
                                        &kp DELETE                                                                       &caps_word
               &trans        &trans     &trans         &trans                                              &trans        &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp C_NEXT C_PREV>;
        };

        right_layer {
            display-name = "Mouse";
            bindings = <
&kp LC(Z)  &kp CARET  &kp AMPERSAND  &kp ASTERISK       &kp LEFT_BRACE        &kp RIGHT_BRACE            &mkp RCLK  &kp HOME       &kp UP       &kp END    &kp INSERT       &kp LC(W)
&kp LC(V)  &kp COLON  &kp SQT        &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS      &mkp MCLK  &kp LEFT       &kp DOWN     &kp RIGHT  &kp UP_ARROW     &kp LC(TAB)
&kp LC(C)  &kp BSLH   &kp PIPE       &kp FSLH           &kp LBKT              &kp RBKT                   &mkp LCLK  &kp PAGE_DOWN  &kp PAGE_UP  &kp HOME   &kp PRINTSCREEN  &kp LS(LC(TAB))
                                     &trans                                                                                        &mkp MCLK
           &trans     &trans         &trans             &trans                                                      &trans         &trans       &mkp RCLK  &trans
            >;

            sensor-bindings = <&inc_dec_kp HOME END &inc_dec_kp C_NEXT C_PREV>;
        };

        func_layer {
            display-name = "Function";
            bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans      &bt BT_CLR  &trans        &trans        &trans        &trans        &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans      &trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans      &trans      &trans        &trans        &trans        &trans        &trans
                         &trans                                                  &trans
        &trans  &trans   &trans   &trans                           &trans        &trans        &trans        &trans
            >;

            // F15 and F14 are brightness controls for macOS

            sensor-bindings = <&inc_dec_kp F15 F14 &inc_dec_kp PG_UP PG_DN>;
        };

        game_layer {
            display-name = "Game";
            bindings = <
&kp DEL    &kp Q       &kp W     &kp E      &kp R        &kp T      &kp Y  &kp U  &kp I      &kp O          &kp P          &kp PRINTSCREEN
&kp TAB    &kp A       &kp S     &kp D      &kp F        &kp G      &kp H  &kp J  &kp K      &kp L          &kp SEMICOLON  &kp END
&kp LSHFT  &kp Z       &kp X     &kp C      &kp V        &kp B      &kp N  &kp M  &kp COMMA  &kp DOT        &kp FSLH       &kp HOME
                                 &kp ESC                                          &to 0
           &kp INSERT  &kp LALT  &kp LCTRL  &lt 1 SPACE                    &mo 2  &kp ENTER  &kp BACKSPACE  &kp RGUI
            >;

            sensor-bindings =
                <&inc_dec_kp PG_UP PG_DN>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
